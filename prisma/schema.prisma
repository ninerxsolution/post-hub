// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// User model for authentication and profiles
model User {
  id          String   @id @default(cuid())
  email       String   @unique
  username    String   @unique
  fullName    String?
  bio         String?
  avatarUrl   String?
  socialLinks Json?    // Store social media links as JSON
  role        UserRole @default(USER)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  posts       Post[]
  categories  Category[]
  tags        Tag[]
  comments    Comment[]

  @@map("users")
}

// Post model for blog content
model Post {
  id               String      @id @default(cuid())
  title            String
  slug             String      @unique
  content          String
  excerpt          String?
  featuredImageUrl String?
  status           PostStatus  @default(DRAFT)
  publishedAt      DateTime?
  viewCount        Int         @default(0)
  metaTitle        String?
  metaDescription  String?
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt

  // Relations
  authorId         String
  author           User        @relation(fields: [authorId], references: [id], onDelete: Cascade)
  categoryId       String?
  category         Category?   @relation(fields: [categoryId], references: [id])
  tags             PostTag[]
  comments         Comment[]

  @@map("posts")
}

// Category model for content organization
model Category {
  id          String   @id @default(cuid())
  name        String   @unique
  slug        String   @unique
  description String?
  createdAt   DateTime @default(now())

  // Relations
  createdById String
  createdBy   User     @relation(fields: [createdById], references: [id])
  posts       Post[]

  @@map("categories")
}

// Tag model for content tagging
model Tag {
  id        String   @id @default(cuid())
  name      String   @unique
  slug      String   @unique
  createdAt DateTime @default(now())

  // Relations
  createdById String
  createdBy   User     @relation(fields: [createdById], references: [id])
  posts       PostTag[]

  @@map("tags")
}

// Junction table for Post-Tag many-to-many relationship
model PostTag {
  id     String @id @default(cuid())
  postId String
  tagId  String

  // Relations
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  tag  Tag  @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@unique([postId, tagId])
  @@map("post_tags")
}

// Comment model for post comments (future feature)
model Comment {
  id        String   @id @default(cuid())
  content   String
  isApproved Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  postId   String
  post     Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  authorId String
  author   User     @relation(fields: [authorId], references: [id])

  @@map("comments")
}

// Enums
enum UserRole {
  USER
  ADMIN
}

enum PostStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}
